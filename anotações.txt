Módulo-1-introdução e instalação 


1-O que é React? 
-é uma biblioteca (ferramenta) de javascript, com um dos objetivos, como próprio nome diz, deixar o projeto 'reativo'. 

2-O que é DOM Virtual?
-o DOM virtual, é a parte da tela onde de fato foi alterado o código, de maneira instantânea, indo direto onde soemnte foi alterado, facilitando a produção de sistemas SPA 

3-Como usar o React
-a essência do react basicamente é "COMPONENTE" 
-é normal usar componentes dentro de outros componentes, para se construir algo, ex: usar componentes de input, label, buttons, dentro de um componente de card, por exemplo .

4-Como pensar em reactês?
-Remetendo novamente a COMPONENTES, lembrando que, o que for criado em componentes, o conteúdo 
    deste componente, onde que que seja chamado, terá a mesma estrutura, cabendo claro, customizações 
    específicas também, mas, por padrão, terão o mesmo formato. 
-O conceito de DRY (dont repeat yourself) = não se repita. A idéia e não ter que ficar criando 
    códigos repetidos para cada ação, em lugares diferentes, porém que façam a mesma coisa. Po exemplo, 
    criar várias tables, modal e etc.. para POST, PUT, SHOW, porém elas tem a mesma estrutura. 
-Este conceito de DRY, tem como idéia, também, facilitar a manutenção futura do código também, tendo 
    em vista que, caso precise alterar uma tabela, por exemplo, basta que se altere no componente, 
    assim, consequentemente, alterando em todo contexto que utilizar aquela tabela. 
-Existe também o conceito que, os filhos terão acesso aos dados dos pais, pensando em componente, 
    se houver um array de dados, e no mesmo conceito existirem componentes que queiram consumir 
    estes dados, será perfeitamente possível. 

5-O que é Next, Remix e Gatsby?
-São frameworks. 
-Next, contém várias funcionalidades pré prontas de necessidades básicas, possibilitando a criação, 
    por exemplo, de diversas telas, e fazendo a troca de telas, dinâmicamente. 
-Remix, menos usado, em processo de manturação, pouco falado na aula, em cresimento ainda.
-Gatsby, voltado para uso em sites estáticos, sem consumo de dados externos.

6-Usando React via CDN
-instalando via CDN, porém não é a recomendada para uso profissional. 
-testes básicos direto no navegador 

7-Instalando o Node
-node já instalado última versão lts
-o node é instalado utilizando um arquivo executável padrão

8-Iniciando um projeto com Next
-primeiro, necessário atualizar o next, no exemplo abaixo, é feito de maneira global com -g 
    npm install -g create-next-app
-instalando direto na pasta que estiver o cmd 
    npx create-next-app 
    em seguida, pergunta o nome do projeto 
    em seguida, pergunta se quer usar typescript (recomendado)
    em seguida, se quer usar o ESLint (serve para deixar o código bonito)
    em seguida, se quer usar o TailWind (para estilização de interface)
    em seguida, se quer criar o src, e dentro ficará o projeto (recomendado para organização)
    em seguida, se quer usar o App Router, (recurso do next para ir de uma página a outra, recomendado)
    em seguida, quer usar o import alias (mais avançado) 
INSTALADO 
-para rodar o projeto, estando na pasta no terminal, para rodar a versão de desenvolvimento do projeto
    npm run dev 
-no cmd será informado o localhost: algum numero para visualizar 
-para fechar o projeto que está rodando no cmd, ctrl + c 
*/VÁRIOS TEMPLATES INTERESSANTES DO NEXT PARA SITES E SISTEMAS

9-Iniciando um projeto com Vite
-Vite serve para criar o projeto com react puro, sem uso de framework (next)
-criado projeto com vite também na linha de cmd 
    npm create vite
    pergunta se quer instalar o pacote vite (sim)
    pergunta o nome do projeto 
    pergunta com qual ferramente (react com typescript) 
INSTALADO 
-para rodar o projeto, estando na pasta no terminal, para rodar a versão de desenvolvimento do projeto
    npm install (instalar as dependências)
    npm run dev (rodar o projeto)


Módulo-2-primeiros passos com react 


1-Primeiro Componente
-baseado no primeiro projeto next 
-componentes 
    trecho de código que pode ser usado e reutilizado em diversos trechos do código 
-não basta criar o componente, ele precisa ser exportado, para que seja utilizado de fato 
-Se dentro do return da function do componente, houver mais de um item (2 h1 ou mais), precisa 
    estar envolvido com uma <div>
-Após abrir o return da function, a <div> que abre primeiro, devem ser as unicas por fora, 
    caso vá inserir mais <div>, deve ser feito dentro do conjunto de <div> já existente. 
-Recomendado, em vez de usar function normal, usar as arrow function 

2-Exportando e Importando um Componente
-Exportação 
    existem 2 tipos de exportação 
        export default = exportação padrão, ou seja, o componente vai ser importado depois, 
            com o nome que no começo foi definido, e depois poderá ser renomeado (não recomendado export default 
            para componentes auxiliares, apenas a page principal)
        export = é a exportação direta já na declaração, indicado ser usado em todos com componentes auxiliares, 
            não sendo necessário fazer o export no rodapé, apenas antes da declaração da function.
    Importante: o export default deve ser usado apenas na exportação da página principal, já os 
        componentes auxiliares, devem usar o export normal.
    Importante, os componentes auxiliares, que fazem a exportação comum sem default, devem ser feito 
        o export já no momento da criação da function (export const Teste = () => {})
        não sendo necessário declarar somente a exportação no rodapé do componente.
    No caso de export comum de componente auxiliar, é possível declarar vários componentes no mesmo arquivo, 
        sendo que, ao importar, após o 'import' no { } ali se informa quais componentes dentro do arquivo 
        informado no endereço a frente, será importado de fato.
    Dentro de um arquivo com vários componentes, podem haver componentes do tipo export, e export default, 
        devendo sempre se atentar em fazer o export default no rodapé do componente default, e também, 
        fazer a importação da maneira correta de cada um.
-Importação 
    o componente e importado no local onde ele será usado, geralmente no topo do código se faz a 
        importação, com a palavra-chave 'import' e em seguida o nome do componente. 
    o comando 'import' que em seguida vai o nome do componente, pode ser renomeado, então, a 
        maneira que ele for descrito neste local, é como ele será chamado depois dentro da <tag />
        importando mesmo, é que após o nome informado e from, esteja o endereço correto do componente. 

3-Usando vários componentes
-A vantagem de usar vários componetes é: organizar o código e deixando-o mais organizado 
-Um ponto importante de agrupar componentes, é, deve-se criar cada componente (conteúdo) em seu 
    próprio arquivo, caso haja necessidade de agrupa-los para mandar para página principal, o ideal 
    é criar um novo componente, o qual faz o agrupamento destes demais componentes, e este então 
    é chamado na página principal, com intuíto de evitar poluir a página principal de renderização 
-Cada tipo de agrupamentos de componentes pode ter um arquivo com suas importações que quiser 

4-Regras gerais do JSX
-Nada pode ser colocado forá da <div> do return() da function, porem pode ser outra <tag> em vez da <div>
-Porém, para sanar este problema, pode se usar um recurso chamado 'FRAGMENT' que nada mais é do que, 
    em vez de por uma <div> dentro do return, usa-se apenas <> </>, desta forma, é possível agrupar 
    vários elementos (<tag>) dentro do return() da function. 
-As <tags> dentro do FRAGMENT sempre devem ser fechadas para não dar erro 

5-JSX e variáveis, funções e objetos
-É possível insrir dentro do componente: variáveis, funções, objetos, condicionais etc... 
-variáveis 
    as variáveis devem ficar após a abertura da function do componente e antes do return() da função, 
    podendo serem reutilizadas dentro das tags do componente, estando dentro {} 
-funções 
    as funções, geralmente declaradas dentro de const e usando arrow function, podem ser criadas 
    dentro da area onde cria as variáveis (após a criação da função do componente e antes do return)
    ou antes da criação da function do componente, de qualquer maneira deve ser chamada entre {} dentro 
    do local desejado 
-CSS inline 
    é colocado como um objeto na tag, style={{color: 'red'}}

6-Passando props para um componente
-Props 
    São propriedades, dados que podem ser passados nos parâmetros das function dos componentes e também chamados no uso do componente 
    no parâmetro da function, vai o objeto que irá conter os dados (geralmente nomeado como 'props', e ao lado vai o objeto de tipagem, geralmente 'Props', o objeto de tipagem) 
        então define o type de cada dado do objeto props. 
    ao chamar o dado que chega por props, deve se chamar como um objeto normal entre {} 
    No arquivo tsx onde se chama o componente com os props, na <tag> onde chama o componente, deve se chamar, o dado em questão, e o valor que lhe será atribuido. 
-Na definição da tipagem do Props, o dado que for seguido de "?" quer dizer que ele é opcional, os que não tiverem a interrogação, são obrigatórios a definição do dado do props, 
    na chamada do componente. 

7-Definindo um padrão em props
-a props, pode ter um valor padrão, ou seja, caso não seja definido nenhum valor para determinado dado da prop na chamada do componente, automaticamente terá um valor 
    definido por default no momento em que as propriedades da props são definidas no parâmetro da função do componente. 

8-Children do componente
-permite o componente receber outros conteúdos dentro dele, e não somente via props 
-no local onde o componente que contém a children irá ser chamado, a chamado será com tag de abertura e fechamento.
-no parametro da function do componente, declara a propriedade e sua tipagem, e em seguida o nome da Tipagem de Props.
-para passar dentro da chamada dupla do componente children, e dentro inserir vários conteúdos com tag HTML, além de estar o contexto envolvido por tag <> FRAGMENT e não <div>, 
    no arquivo tsx do componente, na area de tipagem do objeto que recebe a prop, a propriedade deve receber tipagem ReactNode, para receber uma diversidade de tipos de dados. 

9-Renderização Condicional
-Significa que algo será renderizado (exibido) com determinada condição 
-Posso colocar uma condicional após o início da função do componente e antes do return, para que, 
    determinada exibição seja condicionada (propriedade opcional, quando não preenchida, retorna o que for definido
    em seguida)
-É possível otimizar o código usando condicional ternária direto na chamada da propriedade de JS 
    na tag. (muito melhor, evita a repetição de códigos)
    ex: <p className="text-right text-sm">{author ?? "Author Desconhecido" }</p> 

10-Operador lógico &&
-é dois &&, significa "então" trabalha junto com condicional, agrupar condicional 
-Significa que, se determinada propriedade existir, 'faça' (&&), o teste foi feito colocando a tag 
    HTML dentro das chaves de javascript 

11-Renderizando Listas
-é possível criar arquivos já exportados de um array, ou array de objetos etc, possível também 
    criar arquivos específicos de tipagem, já exportados também, sendo possível serem importados no 
    arquivo em que a tipagem será usada 
-As estruturas de repetição (map, foreach etc...) podem ser inseridas dentro de uma constante, fora do return
    (return é a area de renderização), e essa tal constante, pode ser chamada já com os dados apenas 
    para exibição, porém, a expressão condicional pode também ser inserida dentro de uma tag do return, 
    sempre dentro de chaves javascript
-foi usado o método .map para isso (estrutura de repetição)

12-Filtrando Listas
-filtrando a exibição de dados 
-usando o método .filter a partir do indice resgatado do array de objetos
-a const que recebe o filter armazena um array com dados filtrados, em seguida é feito um .map para 
    fazer o processo de repetição com os dados filtrados armazenados dentro do array qye recebeu o filter 

13-Exercício: Greeting condicional 1
-feito, usando o sistema de módulos

14-Exercício: Greeting condicional 2
-feito, usando condicionais direto inline no jsx 
-na condicional inline, o && pode ser 'e' ou então pode ser 'então/faça'

15-Exercício: Rating via emoji (fácil)
-ok 

16-Exercício: Rating via emoji (difícil)
-ok 

17-Exercício: Tabela de notas estudantis 1
-configurado a tela da tabela 

18-Exercício: Tabela de notas estudantis 2
-feito o loop com map dos dados dentro da tabela 


Módulo-3-estado e evento 


1-Adicionando evento de clique
-feito a function de click antes do return() da function Page, em seguida, dentro do button, 
    chamada a função onClick={nomeDaFunction}
-pode ser contruída a function inline dentro do próprio button 

2-Forma errada de passar eventos
-tomar cuidado para não chamar a function inline errada para ela não ficar para executar 
    já no carregamento da página, funçãoTal() = errada, é sem parentes que chama 
-deve ser passado a definição da função, o nome, apenas 

3-Passando eventos via props
-cria se um prop normalmente e dentro dela chama o nome da função 

4-Usando o preventDefault
-usando o preventDefault tradicional, event.preventDefault(); 
-usar o event ou e no parametro da função e chamar o FormEvent, para typescript, irá 
    importar da biblioteca do react 
-pode ser feito no onSubmit inline no próprio button 

5-O que é um State?
-serve para tornar a tela interativa, fazer modificações 
-envolve o ciclo de renderização da pagina, do componente
-state(estado) serve para renderizar determinada atualização na tela, mas sem recarregar 
-irá renderizar a parte onde está sendo usado o state 

6-Trabalhando com States
-hooks = ganchos, funções do react (é possível criar as próprias hooks) sempre começam com 
    'use'
-state é usado pelo hooks dele 'useState' 
-o state é criado, a partir de uma const de array com 2 itens, o primeiro com o item em 
    questão, e o segundo funciona como uma função para definir um novo valor para o primeiro 
    item.
-ex: const [item, setItem] = useState();
        nome do state, função que altera o state recebem a função useState(valorInicialDeItem)

7-Usando states para auxiliar UI
-feito atividades criado um button toogle que mostra/esconde uma div com texto, usado a funcionalidade do useState para isso 

8-Usando states em campos
-a state serve para armazenar, por exemplo, um valor digitado no input, para posteriormente, 
    utilizar em outro lugar, sem a necessidade de pegar o valor pelo DOM 
-usado método onChange de maneira inline, ele serve para renderizar em tempo real, conforme 
    digita

9-States mudando no tempo
-ok 

10-State Updater
-pegar valor atualziado da memoria e incrementando, pouco usado em projetos reais 

11-Atualizando Objetos em States
-é possível criar, no mesmo useState, um objeto de vários sub dados, exemplo "fullname", colocando nome, sobrenome, idade etc... sem a necessidade 
    de criar um useState parada cada propriedade. 
-clonando objeto para poder alterar somente a propriedade desejada do objeto, não sendo necessário alterar todas 
    ...nomeDoObjeto 

12-Arrays em States: Exibir
-01:10

